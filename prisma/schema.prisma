// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      Int       @id @default(autoincrement())
  clerkId String
  name    String
  email   String

  // Auctions that the user has created
  Auction Auction[] @relation("CreatedAuctions")

  // Bids the user has placed
  Bid     Bid[]

  // Auctions the user is watching
  WatchedAuction WatchedAuction[]
}

model Bid {
  id        Int      @id @default(autoincrement())
  auctionId Int
  userId    Int
  amount    Int
  createdAt DateTime @default(now())

  auction   Auction  @relation(fields: [auctionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Auction {
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  startingPrice Int     @default(0)
  currentPrice  Int     @default(0)
  startDate     DateTime
  endDate       DateTime
  sellerId      Int
  buyerId       Int?
  isSold        Boolean @default(false)
  isLive        Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime? @updatedAt
  watchCount    Int      @default(0)
  bidCount      Int      @default(0)
  photo1        String?
  photo2        String?

  // Bids placed on this auction
  bids          Bid[]

  // The seller of the auction
  seller        User     @relation("CreatedAuctions", fields: [sellerId], references: [id])

  // Users who are watching this auction
  WatchedBy     WatchedAuction[]
}

model WatchedAuction {
  userId    Int
  auctionId Int

  user      User    @relation(fields: [userId], references: [id])
  auction   Auction @relation(fields: [auctionId], references: [id])

  @@id([userId, auctionId]) // Composite primary key to prevent duplicate watch entries
}
